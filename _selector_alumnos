<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Google Sans', 'Segoe UI', Arial, sans-serif; 
            background: #f8f9fa; 
            color: #202124; 
            height: 100vh; 
            overflow: hidden; 
        }
        
        .main-container { 
            width: 100%; 
            height: 100vh; 
            display: flex; 
            flex-direction: column; 
            background: white; 
        }
        
        .header {
            background: linear-gradient(135deg, #1a73e8, #4285f4);
            color: white;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .header-left h1 {
            font-size: 1.5em;
            font-weight: 600;
            margin-bottom: 4px;
        }
        .header-left p {
            opacity: 0.9;
            font-size: 0.9em;
        }
        
        .header-actions {
            display: flex;
            gap: 10px;
        }
        
        .btn-header {
            background: rgba(255,255,255,0.2);
            color: white;
            border: 1px solid rgba(255,255,255,0.3);
            border-radius: 6px;
            padding: 8px 16px;
            cursor: pointer;
            font-size: 0.85em;
            font-weight: 500;
            transition: all 0.2s ease;
        }
        .btn-header:hover {
            background: rgba(255,255,255,0.3);
        }
        
        .stats-bar {
            background: #f8f9fa;
            padding: 12px 20px;
            border-bottom: 1px solid #dadce0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .stats-item {
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 0.9em;
        }
        
        .stats-icon {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.7em;
            color: white;
            font-weight: bold;
        }
        
        .content {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
        }
        
        .search-section {
            margin-bottom: 20px;
        }
        
        .search-input {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #dadce0;
            border-radius: 8px;
            font-size: 1em;
            background: white;
            transition: border-color 0.3s ease;
        }
        .search-input:focus {
            outline: none;
            border-color: #1a73e8;
            box-shadow: 0 0 0 3px rgba(26, 115, 232, 0.1);
        }
        
        .alumnos-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 15px;
        }
        
        .alumno-card {
            background: white;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            border-left: 5px solid transparent;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }
        
        .alumno-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 16px rgba(0,0,0,0.15);
        }
        
        .alumno-card.sin_empezar {
            border-left-color: #9aa0a6;
            background: #fafbfc;
        }
        .alumno-card.parcial {
            border-left-color: #fbbc04;
            background: #fffbf0;
        }
        .alumno-card.terminado {
            border-left-color: #34a853;
            background: #f0f9f0;
        }
        
        .alumno-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 12px;
        }
        
        .alumno-nombre {
            font-size: 1.1em;
            font-weight: 600;
            color: #202124;
            line-height: 1.3;
        }
        
        .estado-badge {
            display: flex;
            align-items: center;
            gap: 6px;
            padding: 4px 8px;
            border-radius: 6px;
            font-size: 0.75em;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .estado-badge.sin_empezar {
            background: #f1f3f4;
            color: #5f6368;
        }
        .estado-badge.parcial {
            background: #fef7e0;
            color: #f9ab00;
        }
        .estado-badge.terminado {
            background: #e6f4ea;
            color: #137333;
        }
        
        .alumno-descripcion {
            color: #5f6368;
            font-size: 0.85em;
            margin-bottom: 15px;
            line-height: 1.4;
        }
        
        .alumno-actions {
            display: flex;
            gap: 8px;
        }
        
        .btn-action {
            padding: 8px 12px;
            border: none;
            border-radius: 6px;
            font-size: 0.8em;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            flex: 1;
        }
        
        .btn-evaluar {
            background: #1a73e8;
            color: white;
        }
        .btn-evaluar:hover {
            background: #1557b3;
        }
        
        .btn-comedor {
            background: #ff6d01;
            color: white;
        }
        .btn-comedor:hover {
            background: #e65c00;
        }
        
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #5f6368;
        }
        
        .empty-state h3 {
            font-size: 1.3em;
            margin-bottom: 8px;
            color: #202124;
        }
        
        .empty-state p {
            font-size: 1em;
            line-height: 1.5;
            margin-bottom: 20px;
        }
        
        .loading {
            text-align: center;
            padding: 60px 20px;
            color: #1a73e8;
            font-size: 1.1em;
        }
        
        .spinner {
            width: 32px;
            height: 32px;
            border: 3px solid #e8f0fe;
            border-top: 3px solid #1a73e8;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px auto;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .status {
            padding: 12px 20px;
            margin: 15px 20px;
            border-radius: 8px;
            font-weight: 500;
            display: none;
        }
        .status.success {
            background: #e6f4ea;
            color: #137333;
            border-left: 4px solid #34a853;
        }
        .status.error {
            background: #fce8e6;
            color: #d93025;
            border-left: 4px solid #ea4335;
        }
        .status.info {
            background: #e8f0fe;
            color: #1565c0;
            border-left: 4px solid #4285f4;
        }
        .status.show {
            display: block;
        }
        
        .footer {
            background: white;
            padding: 15px 20px;
            border-top: 1px solid #dadce0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .footer-info {
            color: #5f6368;
            font-size: 0.85em;
        }
        
        .btn-cancel {
            background: #f8f9fa;
            color: #5f6368;
            border: 2px solid #dadce0;
            border-radius: 8px;
            padding: 10px 20px;
            cursor: pointer;
            font-size: 0.9em;
            font-weight: 600;
            transition: all 0.2s ease;
        }
        .btn-cancel:hover {
            background: #f1f3f4;
            border-color: #9aa0a6;
        }
    </style>
</head>
<body>
    <div class="main-container">
        <div class="header">
            <div class="header-left">
                <h1>üìö Selector de Alumnos</h1>
                <p>Elige un alumno para trabajar con sus evaluaciones</p>
            </div>
            <div class="header-actions">
                <button class="btn-header" onclick="abrirConfiguracion()">
                    ‚öôÔ∏è Configuraci√≥n
                </button>
                <button class="btn-header" onclick="actualizarLista()">
                    üîÑ Actualizar
                </button>
            </div>
        </div>

        <div class="stats-bar" id="statsBar">
            <div class="stats-item">
                <div class="stats-icon" style="background: #9aa0a6;">‚≠ï</div>
                <span>Sin empezar: <strong id="countSinEmpezar">0</strong></span>
            </div>
            <div class="stats-item">
                <div class="stats-icon" style="background: #fbbc04;">üü°</div>
                <span>1¬™ Evaluaci√≥n: <strong id="countParcial">0</strong></span>
            </div>
            <div class="stats-item">
                <div class="stats-icon" style="background: #34a853;">‚úÖ</div>
                <span>Completados: <strong id="countTerminado">0</strong></span>
            </div>
            <div class="stats-item">
                <span>Total: <strong id="countTotal">0</strong></span>
            </div>
        </div>

        <div class="content">
            <div class="search-section">
                <input type="text" id="searchInput" class="search-input" 
                       placeholder="üîç Buscar alumno por nombre..." 
                       oninput="filtrarAlumnos()">
            </div>

            <div class="alumnos-grid" id="alumnosGrid">
                <div class="loading" id="loadingState">
                    <div class="spinner"></div>
                    <div>Cargando alumnos...</div>
                </div>
            </div>

            <div class="empty-state" id="emptyState" style="display: none;">
                <h3>üìù No hay alumnos configurados</h3>
                <p>Para empezar a trabajar, necesitas configurar primero las hojas de alumnos.</p>
                <button class="btn-action btn-evaluar" onclick="abrirConfiguracion()" 
                        style="max-width: 200px; margin: 0 auto;">
                    ‚öôÔ∏è Ir a Configuraci√≥n
                </button>
            </div>
        </div>

        <div class="status" id="status"></div>

        <div class="footer">
            <div class="footer-info">
                <strong>Sistema Txostenak</strong> - Selecciona un alumno para continuar
            </div>
            <button class="btn-cancel" onclick="cerrarModal()">
                ‚ùå Cerrar
            </button>
        </div>
    </div>

    <script>
        let todosLosAlumnos = [];
        let alumnosFiltrados = [];

        function inicializar() {
            console.log('üìö Inicializando selector de alumnos...');
            cargarAlumnos();
        }

        function cargarAlumnos() {
            mostrarCargando(true);

            google.script.run
                .withSuccessHandler(function(resultado) {
                    mostrarCargando(false);
                    
                    if (resultado.success) {
                        todosLosAlumnos = resultado.alumnos;
                        alumnosFiltrados = [...todosLosAlumnos];
                        
                        if (todosLosAlumnos.length === 0) {
                            mostrarEstadoVacio();
                        } else {
                            renderizarAlumnos();
                            actualizarEstadisticas();
                            mostrarEstado('success', `‚úÖ ${todosLosAlumnos.length} alumnos cargados`);
                        }
                    } else {
                        mostrarEstado('error', resultado.message);
                        mostrarEstadoVacio();
                    }
                })
                .withFailureHandler(function(error) {
                    mostrarCargando(false);
                    mostrarEstado('error', 'Error cargando alumnos: ' + error.message);
                    mostrarEstadoVacio();
                })
                .obtenerAlumnosConEstado();
        }

        function renderizarAlumnos() {
            const grid = document.getElementById('alumnosGrid');
            const emptyState = document.getElementById('emptyState');
            
            if (alumnosFiltrados.length === 0) {
                grid.innerHTML = `
                    <div style="grid-column: 1/-1; text-align: center; padding: 40px; color: #5f6368;">
                        <h3>üîç No se encontraron alumnos</h3>
                        <p>Intenta con otro t√©rmino de b√∫squeda</p>
                    </div>
                `;
                return;
            }

            grid.innerHTML = '';
            emptyState.style.display = 'none';

            alumnosFiltrados.forEach(alumno => {
                const card = document.createElement('div');
                card.className = `alumno-card ${alumno.estado}`;
                
                card.innerHTML = `
                    <div class="alumno-header">
                        <div class="alumno-nombre">${alumno.nombre}</div>
                        <div class="estado-badge ${alumno.estado}">
                            ${alumno.icono} ${alumno.descripcion}
                        </div>
                    </div>
                    <div class="alumno-descripcion">
                        Estado: ${alumno.descripcion}
                    </div>
                    <div class="alumno-actions">
                        <button class="btn-action btn-evaluar" onclick="abrirEvaluacion('${alumno.nombre}')">
                            üìä Evaluar
                        </button>
                        <button class="btn-action btn-comedor" onclick="abrirComedor('${alumno.nombre}')">
                            üè´ Comedor
                        </button>
                    </div>
                `;

                grid.appendChild(card);
            });
        }

        function filtrarAlumnos() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase().trim();
            
            if (searchTerm === '') {
                alumnosFiltrados = [...todosLosAlumnos];
            } else {
                alumnosFiltrados = todosLosAlumnos.filter(alumno => 
                    alumno.nombre.toLowerCase().includes(searchTerm)
                );
            }
            
            renderizarAlumnos();
        }

        function actualizarEstadisticas() {
            const stats = {
                sin_empezar: 0,
                parcial: 0,
                terminado: 0
            };

            todosLosAlumnos.forEach(alumno => {
                if (stats.hasOwnProperty(alumno.estado)) {
                    stats[alumno.estado]++;
                }
            });

            document.getElementById('countSinEmpezar').textContent = stats.sin_empezar;
            document.getElementById('countParcial').textContent = stats.parcial;
            document.getElementById('countTerminado').textContent = stats.terminado;
            document.getElementById('countTotal').textContent = todosLosAlumnos.length;
        }

        function abrirEvaluacion(nombreAlumno) {
            mostrarEstado('info', `üìä Configurando evaluaci√≥n para ${nombreAlumno}...`);

            google.script.run
                .withSuccessHandler(function(resultado) {
                    if (resultado.success) {
                        mostrarEstado('success', resultado.message);
                        // El modal se abrir√° autom√°ticamente desde el server
                        cerrarModal();
                    } else {
                        mostrarEstado('error', resultado.message);
                    }
                })
                .withFailureHandler(function(error) {
                    mostrarEstado('error', 'Error: ' + error.message);
                })
                .establecerAlumnoActivoYAbrir(nombreAlumno);
        }

        function abrirComedor(nombreAlumno) {
            console.log('üè´ Iniciando apertura de comedor para:', nombreAlumno);
            mostrarEstado('info', `üè´ Configurando comedor para ${nombreAlumno}...`);

            // Primer paso: Solo establecer el alumno activo
            google.script.run
                .withSuccessHandler(function(resultado) {
                    console.log('‚úÖ Resultado establecer alumno:', resultado);
                    
                    if (resultado.success) {
                        mostrarEstado('success', `‚úÖ ${nombreAlumno} seleccionado para comedor`);
                        
                        // Segundo paso: Abrir Jangela ANTES de cerrar
                        console.log('üîÑ Abriendo modal Jangela...');
                        
                        google.script.run
                            .withSuccessHandler(function(resultadoJangela) {
                                console.log('‚úÖ Jangela abierto, cerrando selector...');
                                // Cerrar selector solo despu√©s de que Jangela est√© abierto
                                google.script.host.close();
                            })
                            .withFailureHandler(function(error) {
                                console.error('‚ùå ERROR abriendo Jangela:', error);
                                mostrarEstado('error', 'Error abriendo Jangela: ' + error.message);
                            })
                            .abrirModalJangela();
                        
                    } else {
                        console.error('‚ùå Error estableciendo alumno:', resultado.message);
                        mostrarEstado('error', resultado.message);
                    }
                })
                .withFailureHandler(function(error) {
                    console.error('‚ùå Error en establecerAlumnoActivo:', error);
                    mostrarEstado('error', 'Error: ' + error.message);
                })
                .establecerAlumnoActivo(nombreAlumno);
        }

        function actualizarLista() {
            console.log('üîÑ Actualizando lista de alumnos...');
            cargarAlumnos();
        }

        function abrirConfiguracion() {
            google.script.run.abrirConfiguracionInicial();
            cerrarModal();
        }

        function mostrarCargando(mostrar) {
            const loadingState = document.getElementById('loadingState');
            if (mostrar) {
                loadingState.style.display = 'block';
                document.getElementById('alumnosGrid').style.display = 'grid';
                document.getElementById('emptyState').style.display = 'none';
            } else {
                loadingState.style.display = 'none';
            }
        }

        function mostrarEstadoVacio() {
            document.getElementById('alumnosGrid').innerHTML = '';
            document.getElementById('emptyState').style.display = 'block';
            
            // Limpiar estad√≠sticas
            document.getElementById('countSinEmpezar').textContent = '0';
            document.getElementById('countParcial').textContent = '0';
            document.getElementById('countTerminado').textContent = '0';
            document.getElementById('countTotal').textContent = '0';
        }

        function mostrarEstado(tipo, mensaje) {
            const status = document.getElementById('status');
            status.className = `status ${tipo} show`;
            status.textContent = mensaje;

            setTimeout(() => {
                status.classList.remove('show');
            }, 5000);
        }

        function cerrarModal() {
            google.script.host.close();
        }

        window.onload = inicializar;
    </script>
</body>
</html>
